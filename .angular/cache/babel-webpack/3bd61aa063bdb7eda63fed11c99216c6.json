{"ast":null,"code":"import _asyncToGenerator from \"/Users/isaac/Work/E-sign/Projects/e-sign-demo-site/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { HttpEventType } from \"@angular/common/http\";\nlet CorprateLawComponent = class CorprateLawComponent {\n  constructor(base64Service, iframeservice) {\n    var _this = this;\n\n    this.base64Service = base64Service;\n    this.iframeservice = iframeservice;\n    this.currentPage = 'form';\n    this.formNotComplete = true;\n    this.errorText = '';\n    this.uploadDocArray = [];\n    this.progress = 0;\n    this.hideSpinner = true;\n    this.loadingDocument = false;\n    this.documentUploaded = false;\n    this.envelopeData = {\n      envelope: {\n        title: \"string\",\n        subject: \"You have a document to sign!\",\n        description: \"Please sign the following document\",\n        language: \"english\",\n        signer_redirect_url: \"string\",\n        documents: [],\n        signers: [],\n        envelope_options: {\n          dont_send_signing_emails: false,\n          sign_in_seqential_order: false,\n          days_envelope_expires: 10\n        },\n        carbon_copies: [],\n        tags: [{\n          name: \"contracts\"\n        }],\n        redirect_url: 'http://localhost:9000/corporate-law'\n      }\n    };\n    this.WorkFlow = new FormGroup({\n      document: new FormControl({}),\n      signers: new FormControl([])\n    });\n    this.SignerDetails = new FormGroup({\n      name: new FormControl(''),\n      email: new FormControl('')\n    });\n\n    this.onFileSelected = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (e) {\n        let file = e.target.files[0];\n\n        if (file) {\n          _this.fileType = file.type;\n          let data = yield _this.base64Service.getBase64(file);\n          let dataArr = data.split(\"base64,\");\n          _this.fileRawData = dataArr[1];\n          let arr = file.name.split('.');\n          _this.fileName = arr[0];\n          let obj = {\n            \"title\": _this.fileName,\n            \"base64\": _this.fileRawData,\n            \"extension\": arr[1],\n            \"type\": \"document\"\n          };\n\n          _this.uploadDocArray.push(obj);\n\n          yield _this.makeReq();\n        } else {\n          console.log(\"error\");\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    this.observer = new MutationObserver(this.mutationCallback);\n    this.mutationConfig = {\n      attributes: true,\n      attributeFilter: ['src'],\n      attributeOldValue: true,\n      characterData: false,\n      characterDataOldValue: false,\n      childList: false,\n      subtree: true\n    };\n    this.tracking = false;\n  }\n\n  ngOnInit() {}\n\n  makeReq() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let body = {\n        \"uploads\": _this2.uploadDocArray\n      };\n      _this2.loadingDocument = true;\n      _this2.hideSpinner = false;\n      yield _this2.iframeservice.UploadDocuments(body).subscribe(event => {\n        switch (event.type) {\n          case HttpEventType.Sent:\n            console.log('Request has been made!');\n            break;\n\n          case HttpEventType.ResponseHeader:\n            console.log('Response header has been received!');\n            break;\n\n          case HttpEventType.UploadProgress:\n            _this2.progress = Math.round(event.loaded / event.total * 98);\n            break;\n\n          case HttpEventType.Response:\n            console.log('Document successfully uploaded!', event.body);\n            console.log(event.status);\n            _this2.progress = 100;\n            _this2.loadingDocument = false;\n            _this2.documentUploaded = true;\n\n            _this2.handleResponse(event);\n\n        }\n      });\n    })();\n  }\n\n  handleResponse(event) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let docArray = [];\n      let documentData = yield _this3.handleDocumentData(event);\n      docArray.push(documentData);\n      _this3.envelopeData.envelope.documents = docArray;\n      _this3.envelopeData.envelope.title = event.body.uploads[0].title;\n      setTimeout(() => {\n        _this3.documentUploaded = false;\n        _this3.hideSpinner = true;\n      }, 3000);\n    })();\n  }\n\n  handleDocumentData(event) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (event.body.uploads[0].id == undefined) {\n        console.log('error with document upload, please refresh page');\n        let res = yield _this4.iframeservice.getMostRecentDocument();\n        let doc = {\n          title: res.files[0].file_name,\n          id: res.files[0].id\n        };\n        console.log(doc, \"doc\");\n        console.log(doc.title);\n        let documentData = {\n          title: doc.title,\n          upload_file: {\n            id: doc.id\n          },\n          attachment_files: [],\n          carbon_copies: []\n        };\n        console.log(documentData);\n        return documentData;\n      } else {\n        let documentData = {\n          title: event.body.uploads[0].title,\n          upload_file: {\n            id: event.body.uploads[0].id\n          },\n          attachment_files: [],\n          carbon_copies: []\n        };\n        return documentData;\n      }\n    })();\n  } // async retrieveLastDocument(){\n  //   console.log('error catch activated')\n  //   return await this.iframeservice.getMostRecentDocument().subscribe(res => {\n  //     console.log(res)\n  //     let obj = {\n  //       title: res.files[0].file_name,\n  //       id: res.files[0].id\n  //     }\n  //       return obj\n  //   })\n  // }\n\n\n  onAddSigner() {\n    if (this.SignerDetails.value.name != \"\" && this.SignerDetails.value.email != \"\" && this.SignerDetails.value.name != null && this.SignerDetails.value.email != null) {\n      this.errorText == \"\";\n      let obj = {\n        name: this.SignerDetails.value.name,\n        email: this.SignerDetails.value.email,\n        document_authentication: {\n          country_code: \"44\",\n          phone: \"12345678910\",\n          passcode: \"test\"\n        },\n        signer_options: {\n          auto_reminder_frequncy: 7,\n          id_check_required: false\n        },\n        signer_details: {\n          primary_sequential_email: this.SignerDetails.value.email\n        }\n      };\n      this.WorkFlow.value.signers.push(obj);\n      this.SignerDetails.reset();\n      console.log(this.WorkFlow.value.signers);\n      return this.WorkFlow.value.signers;\n    } else if (this.SignerDetails.value.name == \"\" && this.SignerDetails.value.email == \"\") {\n      this.errorText = \"Please add the signers name and email\";\n      return null;\n    } else if (this.SignerDetails.value.name == \"\") {\n      this.errorText = \"Please add the signers name\";\n      return null;\n    } else if (this.SignerDetails.value.email == \"\") {\n      this.errorText = \"Please add the signers email\";\n      return null;\n    } else {\n      this.errorText = \"Unknown error adding signer\";\n      return null;\n    }\n  }\n\n  checkFormFields() {\n    if (this.WorkFlow.value.document != {} && this.WorkFlow.value.signers.length >= 1) {\n      this.envelopeData.envelope.signers = this.WorkFlow.value.signers;\n      console.log(this.envelopeData);\n      this.iframeservice.GetLink(this.envelopeData).subscribe(res => {\n        let url = res.redirect_uri;\n        let noProtocol = url.replace(/^https?\\:\\/\\//i, \"\");\n        this.iframeUrl = res.redirect_uri;\n      });\n      this.changePage();\n      return \"passed\";\n    } else {\n      if (this.WorkFlow.value.document.title == undefined && this.WorkFlow.value.signers.length == 0) {\n        this.errorText = \"Please select a document to sign and add at least one signer\";\n        return \"error\";\n      } else if (this.WorkFlow.value.document.title == undefined) {\n        this.errorText = \"Please select a document to sign\";\n        return \"error\";\n      } else if (this.WorkFlow.value.signers.length == 0) {\n        this.errorText = \"Please add at least one signer\";\n        return \"error\";\n      } else {\n        this.errorText = \"Unknown Error\";\n        return \"error\";\n      }\n    }\n  }\n\n  mutationCallback(mutationsList, observer) {\n    console.log('callback truggered');\n\n    for (const mutation of mutationsList) {\n      console.log(mutation);\n\n      if (mutation.type === 'attributes' && mutation.attributeName === 'src') {\n        console.log(mutation);\n        console.log('Old src: ', mutation.oldValue);\n        console.log('New src: ', mutation.target.src);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  setTargetNode() {\n    if (!this.tracking) {\n      this.targetNode = document.querySelector('#target-iframe');\n      this.observer.observe(this.targetNode, this.mutationConfig);\n      this.tracking = true;\n    }\n  }\n\n  messageListener() {\n    console.log('message event triggered');\n  }\n\n  changePage() {\n    if (this.currentPage == 'form') {\n      this.currentPage = 'iframe';\n    } else if (this.currentPage == 'iframe') {\n      this.currentPage = 'form';\n    }\n  }\n\n  messageHeard() {\n    console.log('postmessage recieved');\n  }\n\n};\nCorprateLawComponent = __decorate([Component({\n  selector: 'app-corprate-law',\n  templateUrl: './corprate-law.component.html',\n  styleUrls: ['./corprate-law.component.css']\n})], CorprateLawComponent);\nexport { CorprateLawComponent };","map":{"version":3,"sources":["/Users/isaac/Work/E-sign/Projects/e-sign-demo-site/src/app/pages/corprate-law/corprate-law.component.ts"],"names":["__decorate","Component","FormControl","FormGroup","HttpEventType","CorprateLawComponent","constructor","base64Service","iframeservice","currentPage","formNotComplete","errorText","uploadDocArray","progress","hideSpinner","loadingDocument","documentUploaded","envelopeData","envelope","title","subject","description","language","signer_redirect_url","documents","signers","envelope_options","dont_send_signing_emails","sign_in_seqential_order","days_envelope_expires","carbon_copies","tags","name","redirect_url","WorkFlow","document","SignerDetails","email","onFileSelected","e","file","target","files","fileType","type","data","getBase64","dataArr","split","fileRawData","arr","fileName","obj","push","makeReq","console","log","observer","MutationObserver","mutationCallback","mutationConfig","attributes","attributeFilter","attributeOldValue","characterData","characterDataOldValue","childList","subtree","tracking","ngOnInit","body","UploadDocuments","subscribe","event","Sent","ResponseHeader","UploadProgress","Math","round","loaded","total","Response","status","handleResponse","docArray","documentData","handleDocumentData","uploads","setTimeout","id","undefined","res","getMostRecentDocument","doc","file_name","upload_file","attachment_files","onAddSigner","value","document_authentication","country_code","phone","passcode","signer_options","auto_reminder_frequncy","id_check_required","signer_details","primary_sequential_email","reset","checkFormFields","length","GetLink","url","redirect_uri","noProtocol","replace","iframeUrl","changePage","mutationsList","mutation","attributeName","oldValue","src","setTargetNode","targetNode","querySelector","observe","messageListener","messageHeard","selector","templateUrl","styleUrls"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { HttpEventType } from \"@angular/common/http\";\nlet CorprateLawComponent = class CorprateLawComponent {\n    constructor(base64Service, iframeservice) {\n        this.base64Service = base64Service;\n        this.iframeservice = iframeservice;\n        this.currentPage = 'form';\n        this.formNotComplete = true;\n        this.errorText = '';\n        this.uploadDocArray = [];\n        this.progress = 0;\n        this.hideSpinner = true;\n        this.loadingDocument = false;\n        this.documentUploaded = false;\n        this.envelopeData = {\n            envelope: {\n                title: \"string\",\n                subject: \"You have a document to sign!\",\n                description: \"Please sign the following document\",\n                language: \"english\",\n                signer_redirect_url: \"string\",\n                documents: [],\n                signers: [],\n                envelope_options: {\n                    dont_send_signing_emails: false,\n                    sign_in_seqential_order: false,\n                    days_envelope_expires: 10\n                },\n                carbon_copies: [],\n                tags: [\n                    { name: \"contracts\" }\n                ],\n                redirect_url: 'http://localhost:9000/corporate-law'\n            }\n        };\n        this.WorkFlow = new FormGroup({\n            document: new FormControl({}),\n            signers: new FormControl([])\n        });\n        this.SignerDetails = new FormGroup({\n            name: new FormControl(''),\n            email: new FormControl('')\n        });\n        this.onFileSelected = async (e) => {\n            let file = e.target.files[0];\n            if (file) {\n                this.fileType = file.type;\n                let data = await this.base64Service.getBase64(file);\n                let dataArr = data.split(\"base64,\");\n                this.fileRawData = dataArr[1];\n                let arr = file.name.split('.');\n                this.fileName = arr[0];\n                let obj = {\n                    \"title\": this.fileName,\n                    \"base64\": this.fileRawData,\n                    \"extension\": arr[1],\n                    \"type\": \"document\"\n                };\n                this.uploadDocArray.push(obj);\n                await this.makeReq();\n            }\n            else {\n                console.log(\"error\");\n            }\n        };\n        this.observer = new MutationObserver(this.mutationCallback);\n        this.mutationConfig = {\n            attributes: true,\n            attributeFilter: ['src'],\n            attributeOldValue: true,\n            characterData: false,\n            characterDataOldValue: false,\n            childList: false,\n            subtree: true\n        };\n        this.tracking = false;\n    }\n    ngOnInit() {\n    }\n    async makeReq() {\n        let body = { \"uploads\": this.uploadDocArray };\n        this.loadingDocument = true;\n        this.hideSpinner = false;\n        await this.iframeservice.UploadDocuments(body).subscribe((event) => {\n            switch (event.type) {\n                case HttpEventType.Sent:\n                    console.log('Request has been made!');\n                    break;\n                case HttpEventType.ResponseHeader:\n                    console.log('Response header has been received!');\n                    break;\n                case HttpEventType.UploadProgress:\n                    this.progress = Math.round(event.loaded / event.total * 98);\n                    break;\n                case HttpEventType.Response:\n                    console.log('Document successfully uploaded!', event.body);\n                    console.log(event.status);\n                    this.progress = 100;\n                    this.loadingDocument = false;\n                    this.documentUploaded = true;\n                    this.handleResponse(event);\n            }\n        });\n    }\n    async handleResponse(event) {\n        let docArray = [];\n        let documentData = await this.handleDocumentData(event);\n        docArray.push(documentData);\n        this.envelopeData.envelope.documents = docArray;\n        this.envelopeData.envelope.title = event.body.uploads[0].title;\n        setTimeout(() => {\n            this.documentUploaded = false;\n            this.hideSpinner = true;\n        }, 3000);\n    }\n    async handleDocumentData(event) {\n        if (event.body.uploads[0].id == undefined) {\n            console.log('error with document upload, please refresh page');\n            let res = await this.iframeservice.getMostRecentDocument();\n            let doc = {\n                title: res.files[0].file_name,\n                id: res.files[0].id\n            };\n            console.log(doc, \"doc\");\n            console.log(doc.title);\n            let documentData = {\n                title: doc.title,\n                upload_file: {\n                    id: doc.id\n                },\n                attachment_files: [],\n                carbon_copies: []\n            };\n            console.log(documentData);\n            return documentData;\n        }\n        else {\n            let documentData = {\n                title: event.body.uploads[0].title,\n                upload_file: {\n                    id: event.body.uploads[0].id\n                },\n                attachment_files: [],\n                carbon_copies: []\n            };\n            return documentData;\n        }\n    }\n    // async retrieveLastDocument(){\n    //   console.log('error catch activated')\n    //   return await this.iframeservice.getMostRecentDocument().subscribe(res => {\n    //     console.log(res)\n    //     let obj = {\n    //       title: res.files[0].file_name,\n    //       id: res.files[0].id\n    //     }\n    //       return obj\n    //   })\n    // }\n    onAddSigner() {\n        if (this.SignerDetails.value.name != \"\" && this.SignerDetails.value.email != \"\" && this.SignerDetails.value.name != null && this.SignerDetails.value.email != null) {\n            this.errorText == \"\";\n            let obj = {\n                name: this.SignerDetails.value.name,\n                email: this.SignerDetails.value.email,\n                document_authentication: {\n                    country_code: \"44\",\n                    phone: \"12345678910\",\n                    passcode: \"test\"\n                },\n                signer_options: {\n                    auto_reminder_frequncy: 7,\n                    id_check_required: false\n                },\n                signer_details: {\n                    primary_sequential_email: this.SignerDetails.value.email\n                }\n            };\n            this.WorkFlow.value.signers.push(obj);\n            this.SignerDetails.reset();\n            console.log(this.WorkFlow.value.signers);\n            return this.WorkFlow.value.signers;\n        }\n        else if (this.SignerDetails.value.name == \"\" && this.SignerDetails.value.email == \"\") {\n            this.errorText = \"Please add the signers name and email\";\n            return null;\n        }\n        else if (this.SignerDetails.value.name == \"\") {\n            this.errorText = \"Please add the signers name\";\n            return null;\n        }\n        else if (this.SignerDetails.value.email == \"\") {\n            this.errorText = \"Please add the signers email\";\n            return null;\n        }\n        else {\n            this.errorText = \"Unknown error adding signer\";\n            return null;\n        }\n    }\n    checkFormFields() {\n        if (this.WorkFlow.value.document != {}\n            && this.WorkFlow.value.signers.length >= 1) {\n            this.envelopeData.envelope.signers = this.WorkFlow.value.signers;\n            console.log(this.envelopeData);\n            this.iframeservice.GetLink(this.envelopeData).subscribe(res => {\n                let url = res.redirect_uri;\n                let noProtocol = url.replace(/^https?\\:\\/\\//i, \"\");\n                this.iframeUrl = res.redirect_uri;\n            });\n            this.changePage();\n            return \"passed\";\n        }\n        else {\n            if (this.WorkFlow.value.document.title == undefined\n                && this.WorkFlow.value.signers.length == 0) {\n                this.errorText = \"Please select a document to sign and add at least one signer\";\n                return \"error\";\n            }\n            else if (this.WorkFlow.value.document.title == undefined) {\n                this.errorText = \"Please select a document to sign\";\n                return \"error\";\n            }\n            else if (this.WorkFlow.value.signers.length == 0) {\n                this.errorText = \"Please add at least one signer\";\n                return \"error\";\n            }\n            else {\n                this.errorText = \"Unknown Error\";\n                return \"error\";\n            }\n        }\n    }\n    mutationCallback(mutationsList, observer) {\n        console.log('callback truggered');\n        for (const mutation of mutationsList) {\n            console.log(mutation);\n            if (mutation.type === 'attributes' && mutation.attributeName === 'src') {\n                console.log(mutation);\n                console.log('Old src: ', mutation.oldValue);\n                console.log('New src: ', mutation.target.src);\n                return true;\n            }\n        }\n        return false;\n    }\n    setTargetNode() {\n        if (!this.tracking) {\n            this.targetNode = document.querySelector('#target-iframe');\n            this.observer.observe(this.targetNode, this.mutationConfig);\n            this.tracking = true;\n        }\n    }\n    messageListener() {\n        console.log('message event triggered');\n    }\n    changePage() {\n        if (this.currentPage == 'form') {\n            this.currentPage = 'iframe';\n        }\n        else if (this.currentPage == 'iframe') {\n            this.currentPage = 'form';\n        }\n    }\n    messageHeard() {\n        console.log('postmessage recieved');\n    }\n};\nCorprateLawComponent = __decorate([\n    Component({\n        selector: 'app-corprate-law',\n        templateUrl: './corprate-law.component.html',\n        styleUrls: ['./corprate-law.component.css']\n    })\n], CorprateLawComponent);\nexport { CorprateLawComponent };\n"]},"metadata":{},"sourceType":"module"}